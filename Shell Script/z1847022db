#!/bin/bash

# Milena Zlaticanin - Z1847022
# CSCI 330-1
# Assignment 6
# Due 10/30/20

# This function is used to create a new database file. It takes up to two parameters
new(){ # file name, title
	echo "New database created"
	touch $1 # creating a new database

	# checking to see if the database is specified, it it's not, then display a message
	if [[ -z $2 ]]; then
	    echo "Untitled Database" >> $1
	else
	    echo $2 >> $1 # if the database is specified create it
	fi
}

# This function is used to add a record to an existing database file. It will always take five parameters. If any of them are missing, it is an error.
add(){
    # checking to see if the car is within the correct year range (1870-2025), if it is, add the rest of the parameters (make, model, year, color) and record it
    if [[ -f $1 && $5 -gt 1870 && $5 -lt 2025 ]]; then
	echo "$3, $4, $5, $6" >> $1 
	echo "Successfully added a record to the database"
    else
	# if the car is out of the correct year range then display a message
	if [[  $5 -lt 1870 && $5 -gt 2025 ]]; then
	    echo "Year of the car is out of range. Year MUST be between 1870 and 2025!"
	else
	    echo "File does NOT exist!" # if the file doesn't exist display a message and exit
	fi
	exit 1
    fi
}

# This function is used to show record(s) found in an existing database. This will take up to four parameters, depending on the value of the second.
show(){
    # if the database does not exist, display a message
    if [[ ! -f $1 ]]; then
	echo "Error! Database does NOT exist!"
	exit 1
    fi

    # all shows all of the records added
    if [[ $3 == "all" ]]; then
	cat $1 | while read line; do # shows the contents of the database
	    echo $line
	done
	# single shows the single record in the position indicated by the third parameter
    elif [[ $3 == "single" ]]; then
	if [[ $# < 4 ]]; then # if the user enters less than 4 parameters, display a message and exit
	    echo "Missing parameter!"
	    exit 1
	fi
	
	awk '{if(NR==line_number) print $0}' line_number="$(($4 + 1))" $1 # showing a single line

	# range shows the records in the range starting at the position indicated by the third parameter, up to and including the record indicated by the fourth.
    elif [[ $3 == "range" ]]; then
	if [[ $# < 5 ]]; then # if the user enters less than 5 parameters, display a message and exit
	    echo "Missing parameter!" 
	    exit 1
	fi

	awk '{if(NR >= start && NR <= end) print $0}' start="$(($4 + 1))" end="$(($5 + 1))" $1 # showing a range
    fi
}

# This function is used to delete records from an existing database
delete(){
    # if the database does not exits, display a message and exit
    if [[ ! -f $1 ]]; then
	echo "Error! File does NOT exist!"
	exit 1
    fi
    # all delete all of the records besides the label of the database
    if [[ $3 == "all" ]]; then
	if [[ $# -eq 3 ]]; then
	    echo "all records deleted "
	    sed -n 1p $1 > tmp # saving the label name, save it to the tmp file and move the contents into the target file
	    mv tmp $1
	fi
    # single delete the single record in the position indicated by the third parameter
    elif [[ $3 == "single" ]]; then
	if [[ $# -lt 4 ]]; then
	    echo "Missing parameter!" # if the user tries to delete a record number that does not exist, display a message and exit
	    exit 1
	fi

	sed "$(($4 + 1))d" $1 > tmp # deleting a single line
	mv tmp $1
	
	echo  "1 record deleted"
    # range delete the records in the range starting at the position indicated by the third parameter, up to and including the record indicated by the fourth
    elif [[ $3 == "range" ]]; then
	if [[ $# -lt 5 ]]; then
	    echo "Missing parameters!" # if the user enters less than 5 parameters, display a message and exit
	    exit 1
	fi
	
	sed "$(($4 + 1)),$(($5 + 1))d" $1 > tmp # saving the right range into the tmp file and move the right contents
	mv tmp $1
 	echo `expr $5 - $4 + 1` "records deleted " # using expr to display a message showing how many records were deleted using range
    fi
}

# This function is used to count and print the number of rows in an existing database. It has one parameter, which is not optional.
count(){
    # if the file is not readable, display a message and exit
    if [[ ! -r $1 ]]; then
	echo "Error! Not readable!"
	exit 1
    fi
    # count the number of rows in the existing database
    lineTotal=`wc -l < $1`
    echo "$((lineTotal - 1))"
}

# cmd line args validation
# if the user creates tries to create a file without specifying the name of the file, display a message and exit
if [[ $# -lt 1 ]]; then
    echo "You need to specify a file!"
    exit 1;
fi
# if the file is not writable display a message and exit
if [[ ! -w "$1" && (($2 == "add" || $2 == "delete"))  ]]; then
    echo "Error! Not writable!"
    exit 1
fi
# validations
if [[ $2 == "new" ]]; then
    new $1 "$3"

elif [[ $2 == "add" ]]; then
    add $1 $2 "$3" "$4" $5 "$6"

elif [[ $2 == "show" ]]; then
    show $*

elif [[ $2 == "delete" ]]; then
    delete $*

elif [[ $2 == "count" ]]; then
    count $1
fi

